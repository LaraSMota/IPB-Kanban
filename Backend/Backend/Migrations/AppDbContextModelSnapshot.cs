// <auto-generated />
using System;
using Backend.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Backend.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Backend.Models.Board", b =>
                {
                    b.Property<int>("BoardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("board_id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Background")
                        .HasColumnName("background")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<int?>("TeamId")
                        .HasColumnName("team_id")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("title")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.HasKey("BoardId");

                    b.HasIndex("TeamId");

                    b.ToTable("board");
                });

            modelBuilder.Entity("Backend.Models.Card", b =>
                {
                    b.Property<int>("CardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("card_id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Attachments")
                        .HasColumnName("attachments")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<string>("Checklist")
                        .HasColumnName("checklist")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<int?>("CollumnId")
                        .HasColumnName("collumn_id")
                        .HasColumnType("int");

                    b.Property<string>("Comments")
                        .HasColumnName("comments")
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<DateTime?>("DueDate")
                        .HasColumnName("dueDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Lables")
                        .HasColumnName("lables")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<int?>("Position")
                        .HasColumnName("position")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnName("title")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.HasKey("CardId");

                    b.HasIndex("CollumnId");

                    b.ToTable("card");
                });

            modelBuilder.Entity("Backend.Models.Collumn", b =>
                {
                    b.Property<int>("CollumnId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("collumn_id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BoardId")
                        .HasColumnName("board_id")
                        .HasColumnType("int");

                    b.Property<int?>("Position")
                        .HasColumnName("position")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnName("title")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.HasKey("CollumnId");

                    b.HasIndex("BoardId");

                    b.ToTable("collumn");
                });

            modelBuilder.Entity("Backend.Models.Member", b =>
                {
                    b.Property<int>("MemberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("member_id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PermitionLevel")
                        .HasColumnName("permitionLevel")
                        .HasColumnType("int");

                    b.Property<int>("TeamId")
                        .HasColumnName("team_id")
                        .HasColumnType("int");

                    b.Property<int>("UsersId")
                        .HasColumnName("users_id")
                        .HasColumnType("int");

                    b.HasKey("MemberId");

                    b.HasIndex("TeamId");

                    b.HasIndex("UsersId");

                    b.ToTable("member");
                });

            modelBuilder.Entity("Backend.Models.Team", b =>
                {
                    b.Property<int>("TeamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("team_id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("title")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("TeamId");

                    b.ToTable("team");
                });

            modelBuilder.Entity("Backend.Models.Users", b =>
                {
                    b.Property<int>("UsersId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("users_id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BeNotified")
                        .HasColumnName("beNotified")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("email")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnName("firstName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnName("lastName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasColumnName("nickname")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnName("password")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Picture")
                        .HasColumnName("picture")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.HasKey("UsersId");

                    b.ToTable("users");
                });

            modelBuilder.Entity("Backend.Models.UsersBoard", b =>
                {
                    b.Property<int?>("BoardId")
                        .HasColumnName("board_id")
                        .HasColumnType("int");

                    b.Property<int?>("UsersId")
                        .HasColumnName("users_id")
                        .HasColumnType("int");

                    b.HasIndex("BoardId");

                    b.HasIndex("UsersId");

                    b.ToTable("users_board");
                });

            modelBuilder.Entity("Backend.Models.UsersCard", b =>
                {
                    b.Property<int?>("CardId")
                        .HasColumnName("card_id")
                        .HasColumnType("int");

                    b.Property<int?>("UsersId")
                        .HasColumnName("users_id")
                        .HasColumnType("int");

                    b.HasIndex("CardId");

                    b.HasIndex("UsersId");

                    b.ToTable("users_card");
                });

            modelBuilder.Entity("Backend.Models.Board", b =>
                {
                    b.HasOne("Backend.Models.Team", "Team")
                        .WithMany("Board")
                        .HasForeignKey("TeamId")
                        .HasConstraintName("FK__board__team_id__2C3393D0");
                });

            modelBuilder.Entity("Backend.Models.Card", b =>
                {
                    b.HasOne("Backend.Models.Collumn", "Collumn")
                        .WithMany("Card")
                        .HasForeignKey("CollumnId")
                        .HasConstraintName("FK__card__collumn_id__3F466844");
                });

            modelBuilder.Entity("Backend.Models.Collumn", b =>
                {
                    b.HasOne("Backend.Models.Board", "Board")
                        .WithMany("Collumn")
                        .HasForeignKey("BoardId")
                        .HasConstraintName("FK__collumn__board_i__3C69FB99");
                });

            modelBuilder.Entity("Backend.Models.Member", b =>
                {
                    b.HasOne("Backend.Models.Team", "Team")
                        .WithMany("Member")
                        .HasForeignKey("TeamId")
                        .HasConstraintName("FK__member__team_id__29572725")
                        .IsRequired();

                    b.HasOne("Backend.Models.Users", "Users")
                        .WithMany("Member")
                        .HasForeignKey("UsersId")
                        .HasConstraintName("FK__member__users_id__286302EC")
                        .IsRequired();
                });

            modelBuilder.Entity("Backend.Models.UsersBoard", b =>
                {
                    b.HasOne("Backend.Models.Board", "Board")
                        .WithMany()
                        .HasForeignKey("BoardId")
                        .HasConstraintName("FK__users_boa__board__398D8EEE");

                    b.HasOne("Backend.Models.Users", "Users")
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .HasConstraintName("FK__users_boa__users__38996AB5");
                });

            modelBuilder.Entity("Backend.Models.UsersCard", b =>
                {
                    b.HasOne("Backend.Models.Card", "Card")
                        .WithMany()
                        .HasForeignKey("CardId")
                        .HasConstraintName("FK__users_car__card___412EB0B6");

                    b.HasOne("Backend.Models.Users", "Users")
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .HasConstraintName("FK__users_car__users__4222D4EF");
                });
#pragma warning restore 612, 618
        }
    }
}
